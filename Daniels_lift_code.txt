'General note: floors are numbered ascending, so the bottom floor is floor 1.
'Components are numbered accordingly, i.e LED1 is the LED on the bottom floor.

'These assign output pins and variables in the chip memory to text strings for easy identification
symbol LED3 = B.7    'LED's for each floor.
symbol LED2 = B.6    '"high" to turn on, "low" to turn off.
symbol LED1 = B.5    '___

symbol SR1a = pinC.3 'Microswitches on each floor.
symbol SR1b = pinC.2 '"a" switches are below the door, "b" switches are above.
symbol SR2a = pinC.1 'Switches are positioned so that when both are pressed by the lift car,
symbol SR2b = pinC.0 'the car is lined up with the door.
symbol SR3b = pinB.1 '
symbol SR3a = pinB.0 '___

symbol BTN1 = pinA.2 'Buttons that users can press to control the lift
symbol BTN2 = pinA.3 'note that these are PUSH TO BREAK, so when the button is pressed the input is 0 and when it is not pressed the input is 1
symbol BTN3 = pinA.1 '___

'symbol DR1 = C.4    'Controls for the doors, not implemented in the current design.
'symbol DR2 = C.5    'These have been kept because the circuit components to control them are still present.
'symbol DR3 = C.6    '___

symbol VRBL = A.0    'Input from the variable resistor. use readADC command to get a value between 0 and 255.
symbol BTNM = pinC.7 'Fourth button, situated near top of design and not associated with any floor. Used for mode switch.
symbol SND = B.4     'Output to on-board piezo sounder. use "sound" command. see examples or manual for more detailed info.
symbol MTRU = B.3    'output on this pin to make the lift car go up. can be pulsed to vary speed
symbol MTRD = B.2    'likewise to make the lift go down. note that if both pins are set to high the lift will do nothing.

symbol liftPos = b0  'What floor the lift is at (1-3, value of 0 indicates no match)
symbol VRBLread = b1 'raw data from the variable reistor (0-255)
symbol mode = b2     'what control mode the lift is currently in
symbol timeCheck = b3'Used to count how long a button has  been pressed for
symbol setSound = b4 'Remembers whether or not sound is active (0 = active, 1 = inactive)
symbol progStat = b5 'Used to keep track of what part of the code the lift is executing, for debugging

'These variables are used in manual control. note that they do not use the same scale as the basic liftPos.
symbol tLiftPos = b6 '(Theoretical lift position)

'The main code that controls the lift

initiate:
high LED1
pause 100
high LED2
pause 100
high LED3
pause 100
low LED1
pause 100
low LED2
pause 100
low LED3
gosub posCheck
select liftPos
case 1
  let tLiftPos = 0
case 2,0
  let tLiftPos = 127
case 3
  let tLiftPos = 255
endselect
let mode = 0

main:
'write progstat,0
if BTNM = 0 then
  if mode = 2 then
    let mode = 0
  else
    inc mode
  endif
  mainWait:
  select mode
  case 0
    high LED1
  case 1
    high LED2
  case 2
    high LED3
  endselect
  if BTN3 =0 then
    gosub options
  endif
  if BTNM = 0 then mainWait
  low LED1,LED2,LED3
endif
if mode = 0 then
  gosub liftControl
elseif mode = 1 then
  gosub basicManual
elseif mode = 2 then
  gosub advManual
endif
goto main

options:
if BTN3 = 0 then
  high LED3
  if BTNM = 1 then
    return
  endif
elseif BTN1 = 0 then
  high LED1
  if setSound = 0 then
    inc setSound
  elseif setsound = 1 then
    dec setSound
    sound SND,(75,100)
  endif
  optionsWait:
  if BTN1 = 0 then optionsWait
elseif BTN2 = 0 then
  high LED2
  gosub speedSet
endif
if BTN1 = 1 then
  low LED1
endif
if BTN2 = 1 then
  low LED2
endif
if BTN3 = 1 then
  low LED3
endif
goto options

speedSet:
return

liftControl:
'write progstat,1
'debug
gosub poscheck
if BTN1 = 0 and liftPos != 1 then
  low LED1,LED2,LED3
  gosub lift1
  gosub floor
elseif BTN2 = 0 and liftPos !=  2 then
  low LED1,LED2,LED3
  gosub lift2
  gosub floor
elseif BTN3 = 0 and liftPos !=  3 then
  low LED1,LED2,LED3
  gosub lift3
  gosub floor
endif
return

basicManual:
gosub posCheck
if liftPos = 0 then
  low LED1,LED2,LED3
endif
if BTN1 = 0 and BTN2 = 1 then
  high MTRD
elseif BTN1  = 1 and  BTN2 = 0 then
  high MTRU
else
  low MTRD,MTRU
endif
if BTN3 = 0 then
  basicWait:
  gosub nearAlign
  if liftPos = 0 then goto basicWait
  gosub floor
endif
return

advManual:
readADC VRBL,VRBLread
debug
if tLiftPos < VRBLread then
high MTRU
pause 1
low MTRU
pause 1
inc tLiftPos
elseif tLiftPos > VRBLread then
high MTRD
pause 1
low MTRD
pause 1
dec tLiftPos
elseif  tLiftPos = VRBLread then
gosub posCheck
'gosub floor
endif
return

'Subroutines

lift1:
'write progstat,2
'debug
if SR1a = 1 or SR1b = 1 then
  low MTRD
  gosub liftAlign1
  if liftPos = 1 then
    return
  endif
else
  high MTRD
endif
goto lift1

lift2:
if BTNM = 0 then
  return
endif
'write progstat,3
'debug
if SR2a = 1 or SR2b = 1 then
  low MTRU,MTRD
  gosub liftAlign2
  if liftPos = 2 then
    pause 100
    gosub posCheck
    if liftPos != 2 then goto lift2
    return
  endif
elseif SR1a = 1 or SR1b = 1 then
  high MTRU
elseif SR3a = 1 or SR3b = 1 then
  if SR2a = 0 and SR2b = 0 then
    high MTRD
  endif
endif
goto lift2

lift3:
'write progstat,4
'debug
if SR3a = 1 or SR3b = 1 then
  low MTRU
  gosub liftAlign3
  if liftPos = 3 then
    return
  endif
else
  high MTRU
endif
goto lift3

errorSub:
sound SND,(50,500)
write progstat,255
debug
gosub lift1
return

floor:
'write progstat,5
'debug
select liftPos
case 1
  high LED1
  if setSound = 0 then
  sound SND,(50,50)
  pause 25
  sound SND,(50,50)
  endif
case 2
  high LED2
  if setSound = 0 then
  sound SND,(75,50)
  pause 25
  sound SND,(75,50)
  endif
case 3
  high LED3
  if setSound = 0 then
  sound SND,(100,50)
  pause 25
  sound SND,(100,50)
  endif
case 0
endselect
return

posCheck:
'write progstat,6
'debug
if SR1a = 1 and SR1b = 1 then
  let liftPos = 1
elseif SR2a = 1 and SR2b = 1 then
  let liftPos = 2
elseif SR3a = 1 and SR3b = 1 then
  let liftPos = 3
else
  let liftPos = 0
endif
return

nearAlign:
if SR3a = 1 or SR3b = 1 then
  gosub liftAlign3
  if liftpos !=  3 then goto nearAlign
elseif SR1a = 1 or SR1b = 1 then
  gosub liftAlign1
  if liftPos != 1 then goto nearAlign
elseif SR2a = 1 or SR2b = 1 then
  gosub liftAlign2
  if liftPos != 2 then goto nearAlign
endif
return

liftAlign1:
'write progstat,7
'debug
if SR1a = 1 and SR1b = 0 then
  high MTRU
  pause 1
  low MTRU
  pause 1
  goto liftAlign1
elseif SR1a = 0 and SR1b = 1 then
  high MTRD
  pause 1
  low MTRD
  goto liftAlign1
else
  low MTRU,MTRD
  gosub posCheck
  return
endif

liftAlign2:
if BTNM = 0 then
  return
endif
'write progstat,8
'debug
if SR2a = 1 and SR2b = 0 then
    high MTRU
    pause 1
    low MTRU
    pause 2
    goto liftAlign2
elseif SR2a = 0 and SR2b = 1 then
    high MTRD
    pause 1
    low MTRD
    pause 1
    goto liftAlign2
else
  low MTRU,MTRD
  gosub posCheck
  return
endif

liftAlign3:
'write progstat,9
'debug
if SR3a = 1 and SR3b = 0 then
  high MTRU
  pause 1
  low MTRU
  pause 3
  goto liftAlign3
elseif SR3a = 0 and SR3b = 1 then
  high MTRD
  pause 1
  low MTRD
  pause 3
  goto liftAlign3
else
  low MTRU,MTRD
  gosub posCheck
  return
endif