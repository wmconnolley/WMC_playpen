#include <SerialGraphicLCD.h>
#include <SoftwareSerial.h>

LCD LCD;

#define buttonUp 1
#define buttonDown 2
#define buttonLeft 3
#define buttonRight 4
#define buttonMid 5
#define button1 6
#define button2 7
#define button3 8
#define button4 9

int8_t testLevel[16][16] = {
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
  {-1,-2,00,00,00,00,00,-1,00,00,00,00,00,00,00,-1},
  {-1,00,00,-1,-1,-1,00,-1,00,-1,-2,-1,-1,-1,00,-1},
  {-1,00,01,00,00,-1,00,-1,00,00,00,-1,00,00,00,-1},
  {-1,00,-1,-1,00,00,00,-1,00,-1,00,-1,00,-1,00,-1},
  {-1,00,00,-1,00,00,-1,-1,00,-1,00,-1,00,-1,00,-1},
  {-1,-2,00,-1,00,00,00,00,00,-1,00,-1,00,-1,00,-1},
  {-1,-1,00,-1,-1,-1,-1,-1,-1,-1,00,-1,00,-1,00,-1},
  {-1,00,00,00,-1,00,00,00,00,-1,00,-1,00,00,00,-1},
  {-1,-1,00,-1,-1,00,-1,-1,00,00,00,-1,-1,-1,-1,-1},
  {-1,00,00,-1,00,00,-1,-1,-1,-1,00,00,00,00,00,-1},
  {-1,00,-1,-1,00,-1,00,00,00,-1,-1,-1,-1,-1,00,-1},
  {-1,00,00,00,00,-1,00,-1,00,00,00,00,00,-1,00,-1},
  {-1,-1,00,-1,00,-1,00,-1,00,-1,-1,-1,00,-1,00,-1},
  {-1,00,00,-1,00,00,00,-1,00,00,00,00,00,00,00,-1},
  {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
};

int8_t lastFrame[16][16];

static const unsigned char testFace[] = {
  B00111100,
  B01000010,
  B10100101,
  B10100101,
  B10000001,
  B10111101,
  B01000010,
  B00111100
};

static const unsigned char testWall[] = {
  B00000000,
  B01111110,
  B01111110,
  B01111110,
  B01111110,
  B01111110,
  B01111110,
  B00000000
};

static const unsigned char testLock[] = {
  B00000000,
  B01111110,
  B01100110,
  B01011010,
  B01000010,
  B01000010,
  B01111110,
  B00000000
};

static const unsigned char testKey[] = {
  B00000000,
  B00011100,
  B00010100,
  B00001100,
  B00011000,
  B00001000,
  B00011000,
  B00000000
};

void setup() {
  delay(100);
  pinMode(buttonUp,INPUT_PULLUP);
  pinMode(buttonDown,INPUT_PULLUP);
  pinMode(buttonLeft,INPUT_PULLUP);
  pinMode(buttonRight,INPUT_PULLUP);
  pinMode(buttonMid,INPUT_PULLUP);
  pinMode(button1,INPUT_PULLUP);
  pinMode(button2,INPUT_PULLUP);
  pinMode(button3,INPUT_PULLUP);
  pinMode(button4,INPUT_PULLUP);
  LCD.clearScreen();
  drawLevel(testLevel);
}

void loop() {

}

void drawLevel(const int8_t level[][16]) // work out what is in a square, draw it, connect it if its id is negative
{
  LCD.drawBox(0,0,16*8-1,16*8-1,1); //draw a boundary to hide ragged edges
  for(uint8_t r=0; r <16; r++)
  {
    for(uint8_t c=0; c <16; c++)
    {
      if(level[r][c] != lastFrame[r][c])
      {
        LCD.eraseBlock(r*8,c*8,(r*8)+7,(c*8)+7);
        lastFrame[r][c] = level[r][c];
        if((level[r][c]<-1)||(level[r][c]>0)) //drawing general sprites
        {
          drawSprite(readLevel(level[r][c]),c,r,0);
        }
        if(level[r][c]==-1) //drawing walls
        {
          LCD.drawBox(c*8+1,r*8+1,c*8+6,r*8+6,1);
          LCD.drawBox(c*8+2,r*8+2,c*8+5,r*8+5,1);
          LCD.drawBox(c*8+3,r*8+3,c*8+4,r*8+4,1);
        }
        if(level[r][c]<0) //checking for other connectable squares and drawing the connections
        {
          uint8_t up=0,down=0,left=0,right=0;
          if(level[r][c-1]<0){left=1;}
          if(level[r][c+1]<0){right=1;}
          if(level[r-1][c]<0){up=1;}
          if(level[r+1][c]<0){down=1;}
          if(right&&c<(16-1))
          {
            LCD.drawBox(c*8+7,r*8+1,c*8+8,r*8+6,1);
          }
          if(down&&r<(16-1))
          {
            LCD.drawBox(c*8+1,r*8+7,c*8+6,r*8+8,1);
          }
          if(up+left==2)
          {
            LCD.setPixel(c*8,r*8,1);
          }
          if(up+right==2)
          {
            LCD.setPixel(c*8+7,r*8,1);
          }
          if(down+left==2)
          {
            LCD.setPixel(c*8,r*8+7,1);
          }
          if(down+right==2)
          {
            LCD.setPixel(c*8+7,r*8+7,1);
          }
        }
      }
    }
  }
}

const unsigned char* readLevel(int8_t input)
{
  switch(input)
  {
    case -2:
      return testLock;
    case 1:
      return testFace;
    case 2:
      return testKey;
  }
}

void drawSprite(const uint8_t bitmap[], uint8_t x, uint8_t y, uint8_t offset) //turn a grid position into a screen position and draw it there
{
  x=x*8;
  y=y*8;
  switch(offset)
  {
  case 1:
    x = x+4;
    break;
  case 2:
    y = y+4;
    break;
  case 3:
    x = x-4;
    break;
  case 4:
    y = y-4;
    break;
  }
  drawBitmap(bitmap,x,y,2);
}

void drawBitmap(const uint8_t bitmap[], uint8_t x, uint8_t y, uint8_t type) //turning matrixes intoan image on the LCD with some optimisation
{
  if(type==1||type==3)
  {
    LCD.eraseBlock(x,y,x+7,y+7);
  }
  for(uint8_t r=0; r<8; r++)
  {
    for(uint8_t c=0; c<8; c++)
    {
      if((bitmap[r] & (128 >> c))&&type<3)
      {
        if(bitmap[r] & (128 >> (c+1)))
        {
          for(uint8_t s=1;s<(7-c);s++)
          {
            if(!(bitmap[r] & (128 >> (c+s+1))))
            {
              LCD.drawLine(x+c,y+r,x+c+s,y+r,1);
              c=c+s;                                     //~
              break;
            }
          }
        }
        else
        {
          LCD.setPixel(c+x,r+y,1);
        }
      }
      else if((!(bitmap[r] & (128 >> c)))&&type>2)
      {
        LCD.setPixel(c+x,r+y,1);
      }
    }  
  }  
}